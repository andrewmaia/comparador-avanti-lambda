# @format

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template comparador-avanti-lambda
Globals:
  Function:
    Timeout: 3

Resources:
  Plano:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "valor"
          AttributeType: "N"
        - AttributeName: "statusPlano"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "valor"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: "valorIndex"
          KeySchema:
            - AttributeName: "statusPlano"
              KeyType: HASH
            - AttributeName: "valor"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  Jogo:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "dataJogo"
          AttributeType: "S"
        - AttributeName: "statusJogo"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "dataJogo"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: "dataJogoIndex"
          KeySchema:
            - AttributeName: "statusJogo"
              KeyType: HASH
            - AttributeName: "dataJogo"
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  PlanoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/plano/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        # Acesso Create/Read/Update/Delete para tabela Plano
        - DynamoDBCrudPolicy:
            TableName: !Ref Plano
      Environment:
        Variables:
          # Expõe o nome da tabela do DynamoDB como variável de ambiente
          PlanoTable: !Ref Plano
      Events:
        Plano:
          Type: Api
          Properties:
            Path: /planos
            Method: get

  JogoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/jogo/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        # Acesso Create/Read/Update/Delete para tabela Jogo
        - DynamoDBCrudPolicy:
            TableName: !Ref Jogo
      Environment:
        Variables:
          # Expõe o nome da tabela do DynamoDB como variável de ambiente
          JogoTable: !Ref Jogo
      Events:
        Plano:
          Type: Api
          Properties:
            Path: /jogos
            Method: post

  CompararFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/comparar/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        # Acesso Create/Read/Update/Delete para tabela Jogo e Plano
        - DynamoDBCrudPolicy:
            TableName: !Ref Jogo
        - DynamoDBCrudPolicy:
            TableName: !Ref Plano
      Environment:
        Variables:
          # Expõe o nome da tabela do DynamoDB como variável de ambiente
          JogoTable: !Ref Jogo
          PlanoTable: !Ref Plano
      Events:
        Plano:
          Type: Api
          Properties:
            Path: /comparar
            Method: post

  SugestaoProblemasTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "andrewsmaia@gmail.com"
          Protocol: "email"
      TopicName: "SugestaoProblemas"

  SugestaoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sugestao/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt SugestaoProblemasTopic.TopicName
      Environment:
        Variables:
          SugestaoProblemasTopic: !Ref SugestaoProblemasTopic
      Events:
        Sugestao:
          Type: Api
          Properties:
            Path: /sugestao
            Method: post

  CargaInicialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/carga-inicial/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        # Acesso Create/Read/Update/Delete para tabelas
        - DynamoDBCrudPolicy:
            TableName: !Ref Plano
        - DynamoDBCrudPolicy:
            TableName: !Ref Jogo
      Environment:
        Variables:
          # Expõe o nome das tabelas do DynamoDB como variável de ambiente
          PlanoTable: !Ref Plano
          JogoTable: !Ref Jogo

  CargaInicialResource:
    Type: "Custom::MyCustomResource"
    Properties:
      ServiceToken: !GetAtt CargaInicialFunction.Arn

Outputs:
  PlanoApi:
    Description: "API Gateway endpoint URL for Prod stage for Plano function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/planos"
  JogoApi:
    Description: "API Gateway endpoint URL for Prod stage for Jogo function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jogos"
  SugestaoApi:
    Description: "API Gateway endpoint URL for Prod stage for Sugestao function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sugestao"
  CompararApi:
    Description: "API Gateway endpoint URL for Prod stage for Comparar function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/comparar"
  CargaInicialResponse:
    Description: Data From Lambda Carga Inicial
    Value: !GetAtt CargaInicialResource.cargaFeita
